" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
" Customizations for spf-13
"
" }

" Key Bindings {
    " sane remap of <Esc>
    :imap jk <Esc>

    if has('nvim')
        tnoremap <Esc> <C-\><C-n>
        tnoremap <expr> <C-R> '<C-\><C-N>"'.nr2char(getchar()).'pi'
        tnoremap <C-h> <C-\><C-N><C-w>h
        tnoremap <C-j> <C-\><C-N><C-w>j
        tnoremap <C-k> <C-\><C-N><C-w>k
        tnoremap <C-l> <C-\><C-N><C-w>l
        inoremap <C-h> <C-\><C-N><C-w>h
        inoremap <C-j> <C-\><C-N><C-w>j
        inoremap <C-k> <C-\><C-N><C-w>k
        inoremap <C-l> <C-\><C-N><C-w>l
        "nnoremap <C-h> <C-w>h
        "nnoremap <C-j> <C-w>j
        "nnoremap <C-k> <C-w>k
        "nnoremap <C-l> <C-w>l
    endif

    map <C-J> <C-W>j
    map <C-K> <C-W>k
    map <C-L> <C-W>l
    map <C-H> <C-W>h
"}

" Git Gutter {
    "settings for signify
    let g:signify_vcs_list = [ 'git', 'hg' ]
    let g:signify_realtime = 1
    "let g:signify_line_highlight = 1
" }

" Syntax Highlighting {
    "set guifont=Meslo\ LG\ S\ for\ Powerline:h12,Meslo\ LG\ S\ for\ Powerline:h11,Meslo\ LG\ S\ for\ Powerline:h12,Meslo\ LG\ S\ for\ Powerline:h14
    let g:cpp_class_scope_highlight = 1
    let g:cpp_member_variable_highlight = 1
    let g:cpp_experimental_template_highlight = 1
    let g:cpp_concepts_highlight = 1
" }

" Clang Library Path {
    " path to directory where library can be found
    if OSX()
        let g:clang_library_path='/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'
    else
        let g:clang_library_path='/usr/lib/llvm-3.8/lib'
    endif
" }

" YCM Options {
    let g:ycm_enable_diagnostic_signs = 1
    let g:ycm_enable_diagnostic_highlighting = 1
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_autoclose_preview_window_after_completion = 1
    let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
    nnoremap <Leader>] :YcmCompleter GoTo<CR>
    "let g:ycm_rust_src_path = '~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust'
"}

" CtrlP options {
    "let s:ctrlp_fallback = 'ag %s --hidden --nocolor -l -g ""'
    "let g:ctrlp_show_hidden = 1
" }

" Ack Options {
    if executable('ag')
        let g:ackprg = 'ag --vimgrep'
    endif
" }


" Tagbar {
    let g:tagbar_type_rust = {
        \ 'ctagstype' : 'rust',
        \ 'kinds' : [
            \'T:types,type definitions',
            \'f:functions,function definitions',
            \'g:enum,enumeration names',
            \'s:structure names',
            \'m:modules,module names',
            \'c:consts,static constants',
            \'t:traits',
            \'i:impls,trait implementations',
        \]
        \}
" }
